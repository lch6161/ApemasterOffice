RTSP Web Multi-Engine Player (Supports Multiple Channels): Developed based on the cross-browser native mini-program system - ApeMaster Middleware Network Advanced Edition. The underlying layer can call device network SDKs from Hikvision and Dahua (Hikvision SDK download: https://open.hikvision.com/download/5cda567cf47ae80dd41a54b3?type=10 Dahua SDK download: https://support.dahuatech.com/tools/sdkExploit ) and the open-source LibVLC support library (requires installation of VLC media player or pairing with the green version of the VLC desktop program) to achieve playback.
Compatible with Chrome 41, Firefox 50, Edge 80 (Chromium kernel), IE 8, Opera, Yandex, Electron, 360 Extreme/Secure Browser, Doubao, Quark, QQ, Sogou, Maxthon, Huawei, Lenovo, Liebao, QiAnXin, RedLotus, Dual-core browsers, etc., including low versions. Also compatible with the latest versions of these browsers.
Recommended for use on Windows 10 and above. For XP, VLC version 2.2.8 is suggested. For systems above XP, the latest versions 3.0.21 or 4.0 are recommended. Copyrights for VLC, Hikvision, Dahua SDK, and other playback engines belong to their respective companies.

Advantages of this mini-program:
1) The preferred playback solution in the entire market capable of achieving low latency (around 200 milliseconds), supported by mainstream browser versions;
2) Supports simultaneous real-time playback of multiple channels, playback, frame-by-frame rewind, next frame, screenshot capture, screen recording, good performance for HD video or large-screen playback;
3) Underlying playback technology uses Hikvision and Dahua Device Network SDKs (copyright belongs to the original manufacturers), supports Hikvision and Dahua private protocols, RTSP stream playback, PTZ control, voice intercom, etc., supports H.264 and H.265;
4) Additional payment grants access to the source code of the playback mini-program for custom development;
5) Supports Hikvision and Dahua cameras, Hikvision DVRs, and various series of devices;
6) Supports local MP4 and other video files, and network stream playback like RTSP, RTMP, MMS.

Applicable to Hikvision DVR, NVR, DVS, network cameras, network dome cameras, etc., not limited to the following Hikvision product models:
DVR: DS-9100, DS-8100, DS-8000-S, DS-8800, DS-7800, DS-7300, DS-7200, DS-7100, DS-7000 and other series, including -ST, -SH, -SE, -SN, -RT, -RH, -XT, etc.
NVR: DS-96000N-I24/I16, DS-96000N-F24/F16(/H)(/I), DS-96000N-H24/H16(/H)(/I), DS-9600N-I8/H8/F8/ST/XT,
DS-8600N-I8/H8/F8/E8/ST/XT, DS-7800N-E1/SN/SNH, DS-7600N-ST/E2/E1, DS-7700N-ST/E4, DS-9500N-ST,
DS-9500N-S, DS-9600N-SH, DS-7600N-S, DS-9664N-RX, etc.
XVR: DS-9000HQH-SH, DS-8100HQH(/HGH)-SH, DS-8000HQH-SH, DS-7300HQH(/HGH)-SH,
DS-7200HQH(/HGH)-SH, DS-8800HQH(/HGH)(/HUH)-SH(/Fx), DS-7900HQH(/HGH)(/HUH)-SH(/Fx),
DS-7800HQH(/HGH)(/HUH)-SH(/Ex/Fx), DS-7100HGH-E1(/F1), etc.
HDVR (Hybrid DVR): DS-9000, DS-8000-ST, DS-7600H-ST/-S series, etc.

Applicable to Dahua general devices: IPC, dome cameras, intercom, etc.

File playback supports private, PS, TS, 3GP, AVI, and other encapsulated recording file formats. Supported video codecs include private H.264, standard H.264, MPEG2, MPEG4, MJPEG, H.265, SVAC, Smart264, Smart265, etc. Audio formats include G.711, G.722, G.726, MPEG, AAC, PCM, etc.

1. Installation of ApeMaster Middleware:
1) If it is an exe installer, please run it directly;
2) If it is a green version package, please unzip it to a directory on the disk, then double-click "InstallWrl.bat" to install;
3) Upon installation completion, the ApeMaster Middleware service will start. The ZbaService.txt log file in the Data subdirectory of the installation directory outputs the running status.

2. RTSP Web Multi-Engine Player Control Interfaces:
Note: The following functions can be executed after connecting to the ApeMaster main service via WebSocket (ws://localhost:83?sid=12345&flag=1). If the default listening port is not 83 (refer to the document "ApeMaster Developer Manual.pdf" in the SDK package for configuring the listening port), specify the port number in the connection address.
For front-end integration using ordinary JS scripts, please refer mainly to: http://test.yuanmaster.com/player. The JS script programs needed for embedding are completely open source. For VUE framework, refer to http://test.yuanmaster.com/playerJS. For simple test startup, refer to the following web pages:
HTTP Web Online Test: http://test.yuanmaster.com/HKFrame.html       HTTPS Web Online Test: https://test.yuanmaster.com/HKFrame.html
If IE browser compatibility is also needed, in the standalone test webpage, the CLSID in <object ID="WrlWS" CLASSID="CLSID:C0971B90-4513-4E2D-A0B6-15B915FE748A" width="0" height="0"></object>
needs to be replaced with: 21ADE2E6-B4DD-4F3E-8BD5-9DDAD1785F3A

Front-end integration can refer to the above test web pages for the required JS scripts to embed; the script programs are completely open source.
Double-click or press the letter F when the playback window is selected to enter full-screen mode. Exit full-screen mode via ESC, Windows key, ESC, or the letter F. Full-screen switching sends a JSON packet Player_FullScreen notification.

1) Request to start the RTSP Web Multi-Engine Player:
Type is the browser type. Pass 0 for automatic detection (prerequisite: the current browser is started and displayed in the foreground. Flag must be 0 when the current page loads). Can forcibly specify browser type Type (1 for IE, 2 for Chrome, 4 for Firefox, 5 for Brave (English), 8 for Opera, 9 for Vivaldi (English), 10 for Yandex, 16 for Edge (Chromium kernel), 20 for Electron, 32 for 360 Extreme Browser, 33 for 360 Secure Browser, 34 for 360 Extreme Browser, 35 for 360 Enterprise Security Browser, 36 for 360 Gaming Browser, 37 for 360 AI Browser, 40 for Lenovo Browser, 45 for Dual-core Browser, 50 for QQ Browser, 51 for WeChat Webpage, 55 for QiAnXin Browser, 57 for RedLotus Browser, 60 for Sogou Browser, 61 for Quark, 62 for Maxthon Browser, 63 for Liebao Browser, 66 for Doubao, 70 for Huawei Browser).
When Type needs to specify the browser type, first obtain the current browser's type Type, main window handle BrowserWnd, drawing window handle DrawWnd, and current webpage title Title through the interface Wrl_BrowserInfo in the TestWrl.txt document. Decide whether to continue starting by judging if the Title is the webpage that needs embedding. If continuing, set the obtained parameters Type, BrowserWnd, DrawWnd into the current request parameters to speed up startup.
Title: Keyword in the webpage title.
Url: The actual address of the webpage where the mini-program is loaded. Defines the display position and size of the mini-program on the webpage, multi-window playback addresses and options, etc. Not recommended for use; suggest using Web parameter instead.
Flag mask flag: 1 specifies new tab loading (if neither 1 nor 16 is specified, current page load) 2 shows mini-program window border 4 does not automatically crop out-of-bound windows 8 automatically adapts to webpage height and width display 64 enable Web parameter 128 anti-screenshot 256 force display to secondary screen 512 allow multiple instances on the same webpage.
Web: Playback configuration (new method), can replace Url. Flag value +64 to use this configuration. Must specify Left, Top, Width, Height values in this command.
Version playback mini-program version, 0 plays within the playback mini-program, 1 plays in an independent process.
ShowType Playback window split-screen type, default 1 shows only one playback window. Supports values from 1 to 31, up to 31 split-screen types. Note: This value does not represent the number of splits.
CheckVLC If using LibVLC engine playback, set 1 to detect if VLC media player is installed on the local machine.
IframeX and IframeY are the horizontal and vertical offset correction coordinates for iframe nesting, respectively.
BarW and BarH are the reserved areas on the right and bottom of the webpage, respectively. ScrollTop is the reserved height for top scrolling.
The actual display position of the mini-program is first based on the coordinates and size specified in the Web or Url webpage, then corrected according to the values set in IframeX, IframeY, BarW, BarH.
Option: Playback parameters, multiple parameters separated by spaces.
PlayEngine=2 specifies playback using LibVLC engine. Default 0 uses Hikvision SDK private protocol playback. 1 uses Hikvision MP4 local file engine playback. 3 uses FFPlayer engine playback. 4 uses Dahua SDK private protocol playback.
AutoLoop=1 specifies whether to loop playback, 1 loops.
Caching=6 For Hikvision private protocol playback engine, setting 6 represents maximum cache of 6 frames. For other playback engines, setting 6 represents 600 milliseconds delay.
Server Specifies server address, login username, password, and port information for Hikvision or Dahua SDK private protocol playback.
Channel=1 Channel ID for private protocol playback. Not needed when directly connecting to a camera. Default channel sequence is 1. DVRs can specify channel numbers greater than 32.
Stream=1 Specifies stream type. 0 is main stream, 1 is sub stream. Only valid for PlayEngine=0.
Link=1 Specifies connection type. 0 is TCP mode, 1 is UDP mode. Invalid for PlayEngine=1.
Mute=1 Specifies whether to play muted. 1 is muted.
FrameCache=20 Specifies whether to play frame by frame. 0 no, greater than 0 represents the maximum number of cached frames for frame-by-frame playback. Only valid for PlayEngine=2.
AudioColumn=1 Specifies whether to notify sound column information. 1 push. Only valid for PlayEngine=2.
ToolBar=1 Specifies whether to display the playback toolbar. 1 displays.
InSidePlay=1 Specifies built-in playback, default 1. For VLC, Hikvision private, and MP4 file playback, specifying 0 supports selecting and zooming in on a local video area.
LogFlag=1 Specifies VLC error log output, default 1.
ClockSync=-1 Specifies whether audio is synchronized with video, default -1 playback engine default value.
Transform=none Specifies whether to rotate the VLC playback image. Besides default none (no rotation), supported settings: 90, 180, 270, hflip, vflip, transpose, antitranspose.
AudioOut=any Specifies audio output type. Options: mmdevice, directsound, waveout, amem, afile, NDI, adummy, none.
Avcodec=any Specifies hardware acceleration type. none: no hardware acceleration. Can specify dxva2, d3d11va, any. When any, let the playback engine choose the appropriate one.
StartTime=3.000 Specifies start time, 3 seconds. Decimal represents milliseconds. Only supports VLC engine playbackback and file video.
StopTime=300.000 Specifies stop time, 300 seconds. Decimal represents milliseconds. Only supports VLC engine playbackback and file video.
Open: The stream address or local multimedia file path for the first window to play automatically after startup. Replace backslash \ with / before passing. Can also be specified in Web. If the password in Open contains special characters like +, it needs to be moved to Web for specification.
Note: If Open, Url, Web contain special characters = & double quotes or Chinese, etc., they need to be URL-encoded before passing. If not a full local path, the middleware program's Data subdirectory is used as the root directory by default.
Example:
Start by automatically identifying the current browser's specified position and size:
{"req":"Wrl_VideoWebPlayer","rid":5,"para":{"Type":"0","Title":"HK Web Player","Flag":66,"Left":20,"Top":230,"Width":480,"Height":320,"IframeX":0,"IframeY":0,"BarW":0,"BarH":0,"ScrollTop":0,"Version":"0","ShowType":6,"Web":[{"ID":1,"Server":"wzh:test123456@192.168.1.12:8000","Option":"Channel=33 Caching=1 Stream=1 Link=1"},{"ID":2,"Server":"wzh:test123456@192.168.1.2:37777","Option":"Channel=1 Link=1 Stream=0 PlayEngine=4"},{"ID":3,"Server":"admin:test123456@192.168.1.8:8000","Option":"Link=1 Stream=0"},{"ID":4,"Server":"wzh:test123456@192.168.1.8:8000","Option":"Link=0 Stream=1"},{"ID":5,"Uri":"d:/zorro/test.mp4","Option":"PlayEngine=1"},{"ID":6,"Uri":"https://vjs.zencdn.net/v/oceans.mp4","Option":"PlayEngine=2"}]}}

Automatically identify the current browser and fill the webpage area display:
{"req":"Wrl_VideoWebPlayer","rid":5,"para":{"Type":"0","Title":"HK Web Player","Flag":72,"Left":20,"Top":230,"Width":480,"Height":320,"IframeX":0,"IframeY":0,"BarW":0,"BarH":0,"ScrollTop":0,"Version":"0","ShowType":6,"Web":[{"ID":1,"Server":"wzh:test123456@192.168.1.12:8000","Option":"Channel=33 Caching=1 Stream=1 Link=1"},{"ID":2,"Server":"wzh:test123456@192.168.1.2:37777","Option":"Channel=1 Link=1 Stream=0 PlayEngine=4"},{"ID":3,"Server":"admin:test123456@192.168.1.8:8000","Option":"Link=1 Stream=0"},{"ID":4,"Server":"wzh:test123456@192.168.1.8:8000","Option":"Link=0 Stream=1"},{"ID":5,"Uri":"d:/zorro/test.mp4","Option":"PlayEngine=1"},{"ID":6,"Uri":"https://vjs.zencdn.net/v/oceans.mp4","Option":"PlayEngine=2"}]}}

After startup, three JSON data packets will be received sequentially:
A. {"ret":0,"rid":5,"data":{"ID":2}}
Indicates the mini-program WS listening service is ready.
B. {"event":"Wrl_Listen","rid":2,"rid":5,"data":{"SID":"123","PID":"VideoWebPlayer","port":920}}
Returns the listening port. A new WebSocket connection can be established to call related functions in the mini-program, such as playing a new Player.
Indicates the mini-program was created successfully. Returns the ID as the current mini-program running instance ID. Using this ID, commands like Wrl_AppletControl, Wrl_AppletScroll, Wrl_AppletResize can be executed.
C. {"event":"Wrl_AppletOK","rid":2,"rid":5,"data":{"SID":"123","PID":"VideoWebPlayer","Port":920}}

Since it depends on the VLC desktop program, the following interface can be called in advance to obtain the installation status of VLC and other players. If not installed, prompt to download and install first.
{"req":"Wrl_PlayerInfo","rid":1,"para":{}}
Obtains the installation status of the VLC desktop player on the current computer. Return value:
{"ret":0,"rid":1,"req":"Wrl_PlayerInfo","data":{"Info":[{"Type":1,"X64":1,"Ver":"3.0.17.4","Path":"C:/Program Files/VideoLAN/VLC/vlc.exe"}]}}
Type 1 represents VLC. X64 indicates whether it's the 64-bit version. Ver represents file version information. Path is the installation path.

2) Request to control the RTSP Web Multi-Engine Player:
When the front-end no longer needs the mini-program, it can specify to close it, or show/hide, full-screen display, etc.
ID is the ID value returned when starting the mini-program. Code represents the control type mask: 1 normal close, 128 force immediate close, 2 full-screen display, 4 auto hide, 8 restore display, 16 switch auto-adapt webpage height and width display mode, 32 force hide. Among them, full-screen display 2 can be canceled directly via hotkey ESC. After setting 4 and 32 to hide, it can be restored via 8.
{"req":"Wrl_AppletControl","rid":2,"para":{"ID":"1","Code":4}}

3) Request to scroll the RTSP Web Multi-Engine Player in the webpage:
When the front-end intercepts a webpage scroll notification, this interface needs to be called to achieve scroll linkage between the mini-program and the webpage.
ID is the ID value in the JSON returned when starting the mini-program.
Code is the scroll direction: 1 horizontal, 2 vertical, 3 both.
Left is the horizontal scrollbar position, Top is the vertical scrollbar position.
{"req":"Wrl_AppletScroll","rid":3,"para":{"ID":"1","Code":2,"Left":0,"Top":100}}

4) Request to change the display position or size of the RTSP Web Multi-Engine Player in the webpage:
When the front-end webpage display area zooms, the display position or size of the mini-program can be dynamically modified.
ID is the ID value in the JSON returned by Wrl_VideoWebPlayer starting the mini-program. Width and Height are the new width and height, respectively.
X and Y are the new display positions. If not specified, remain unchanged. If specified, the originally set IframeX and IframeY become invalid.
{"req":"Wrl_AppletResize","rid":4,"para":{"ID":1,"Width":500,"Height":600}}
Or, simultaneously modify the mini-program display starting coordinates:
{"req":"Wrl_AppletResize","rid":5,"para":{"ID":1,"Width":500,"Height":600,"X":20,"Y":20}}

5) Request to set webpage reserved right width and bottom height, scrollbar information, vertical and horizontal scroll positions:
When the mini-program display area exceeds the current webpage, the influence of the scrollbar display needs to be removed.
ID is the ID value in the JSON returned when starting the mini-program. BarW is the reserved right width. BarH is the reserved bottom height.
Code 1 represents horizontal scrollbar exists, 2 represents vertical scrollbar exists, 3 represents both exist.
ScrollTop vertical scrollbar position ScrollTop horizontal scrollbar position (Note: typo in original, likely ScrollLeft).
{"req":"Wrl_ScrollBar","rid":6,"para":{"ID":"1","Code":2,"BarW":0,"BarH":0,"ScrollTop":0,"ScrollLeft":0}}

6) Request to perform Alpha transparency processing on the mini-program window to facilitate the front-end temporarily displaying menus overlaid on the mini-program window:
ID is the ID value returned by Wrl_VideoWebPlayer starting the mini-program. Alpha is the transparency percentage, 1-100.
{"req":"Wrl_AppletAlpha","rid":7,"para":{"ID":1,"Alpha":30}}

7) Request to take a screenshot of the mini-program window content:
ID: The aid instance value in the JSON returned when starting the mini-program.
File: Specifies the screenshot file save path or extension.
Base64: Specifies whether to return BASE64 encoded image content. Set to 1 for yes.
Flag: If the embedded mini-program window (e.g., DirectUI or Direct3D drawing) captures abnormally, additionally specify 1 to see the effect. Furthermore, if multiple or selected area screenshots are needed, start the screenshot tool separately by adding 2 or 4.
{"req":"Wrl_AppletSnap","rid":10,"para":{"ID":1,"Base64":1,"Flag":2,"File":".jpg"}}

8) Request to scale the embedded webpage mini-program, used for browser webpage proportional scaling. Generally not needed:
ID is the ID value in the JSON returned when starting the mini-program. If Scale is not specified, gets the current scaling percentage used by the mini-program, generally consistent with the system scaling ratio.
{"req":"Wrl_AppletScale","rid":11,"para":{"ID":1,"Scale":120}}

3. Mini-program Installation, Upgrade, Uninstallation
1) Request to install RTSP Web Multi-Engine Player
Please enter the following request in the test webpage input box, then click Send to complete the installation:
{"req":"Plugin_Install","rid":1,"para":{"Name":"RTSP Web Multi-Engine Player","PID":"VideoWebPlayer","Date":"2025-05-30","Desc":"Cross-browser RTSP Web Multi-Engine Player on ApeMaster, supports low-latency multi-channel RTSP stream playback in Chrome, Edge, Firefox, IE, Opera, 360, QQ and other latest browser webpages.","DownAddr":"http://local.zorrosoft.com/Files/Net/VideoWebPlayer.pid","MD5":"0941A980968E4B7B98F58840AA74B419","Version":"2.2.17.6","Size":11108352,"HideIns":0,"Type":8,"Cookie":"","Auth":"","TK":"9B658B9FE61DBF5617D62D864551F47DF41E17198F705E15F0F23938F7611B4DEA673C6FC8CF08FE36F0A1B2EB6DADB68C9D69691F5FCDCB34EFD8B1D0BA6921BA8F25BDE3FA8B215698038E4BF5D9B76B611CD947BD2A5E8654F68EC58AF8E126D092B9B7AE5A2A1AD2AC037648E801C5F9A2F3C219BB893594D86DB8ABD22854B0FCBE70FB1699A1145711E961FD418E76D1DD44621C28A377E1C96BCABC145EDF4ADE21E09325B022D6FFB8E35FE7C09FB1ED28C5D3D4683342E1BA4171A6F02B759E452AFC64DE3BB51FB55CAAD96533303683765567ABB7C9578AF972586498058DA285B3A04753312CC99B18496746C4DA7396E20434473377EBAF4AA8"}}
After starting the installation, installation progress will be continuously received until the installation ends.

2) Request to upgrade the RTSP Web Multi-Engine Player:
{"req":"Plugin_Update","rid":1,"para":{"Name":"RTSP Web Multi-Engine Player","PID":"VideoWebPlayer","Date":"2025-05-30","Desc":"Cross-browser RTSP Web Multi-Engine Player on ApeMaster, supports low-latency multi-channel RTSP stream playback in Chrome, Edge, Firefox, IE, Opera, 360, QQ and other latest browser webpages.","DownAddr":"http://local.zorrosoft.com/Files/Net/VideoWebPlayer_Update.pid","MD5":"833473D38E68FA685CC06AEBF48FF377","Version":"2.2.17.6","Size":11108352,"HideIns":0,"Type":8,"Cookie":"","Auth":"","TK":"A49B75909304121065F9023E6A05061822D8168C0236E56E27886C6BCA2A0B7FC62CC8001284D65468A67C2B52277826BBAA6B7078B9B9DB5FEC154BA20494747E9DE2F4D321B53B83C42656D7992A9F46B70364D80A080D7468B650D6C5A7299B2FBE2DCC5B746587633CCB01D1D8376A92131706A2C59DE56B160C2C5B2FBC044BE0DBDEDFEB73F35F74D57EAD646B78788BE411C59F60E4B565612FA74800B4148B9F7804F0E4979EF082893E6E4AA90BCD424466B1BAF40DAB2B0230DCAEA21531D1EBB270206D705CC37E2FE6329BFB520BC64EAC206AD204998BDC9DD07FCD8CF74AFF82DD0C8ADE833F389ADF9217C35AFA0E5308D14AF082858931EE"}}
The JSON request packets for installation and upgrade above may differ due to version upgrades. If errors occur during installation or upgrade, please contact customer service to obtain the latest request packet.

3) Request to uninstall the RTSP Web Multi-Engine Player:
The official version requires adding TK verification. Specific rules refer to the document "ApeMaster Middleware Security Solution.pdf" in the SDK package. The packaged program ZbaPackage.exe in the SDK package can generate requests with TK in middleware maintenance.
{"req":"Plugin_Remove","rid":3,"para":{"PID":"VideoWebPlayer","Type":8}}

4. RTSP Web Multi-Engine Player calls the ActiveX control interface encapsulated by the multi-engine native playback SDK. First, based on the port number returned after the Wrl_VideoWebPlayer request starts, establish a new WebSocket connection to execute the following commands:
A. Common function requests:
1) Get the AutoLoop (auto loop playback) value property of the specified ID playback window, only valid for MP4 and other file playback.
Window sequence ID starts from 1. The numbering principle is from left to right, then top to bottom. When encountering multi-layered windows on the right, continue until the right window sequence sorting is completed.
Request: {"req":"Player_GetAutoLoop","rid":41,"para":[{"ID":1},{"ID":2}]}
Return: {"ret":0,"rid":41,"ID":1,"data":{"Ret":0,"AutoLoop":0}} and {"ret":0,"rid":41,"ID":2,"data":{"Ret":0,"AutoLoop":0}}
ret is the request return value, 0 normal, non-zero abnormal. If abnormal, get the error description err at the same level as ret, same below.
Ret is the return value of the called ActiveX function, 0 represents normal.
AutoLoop 1 represents loop playback, 0 no loop.

2) Set the AutoLoop (auto loop playback) value for the specified ID window, only valid for MP4 and other file playback.
Request: {"req":"Player_PutAutoLoop","rid":42,"para":[{"ID":1,"AutoLoop":1},{"ID":2,"AutoLoop":0}]}
Return respectively: {"ret":0,"rid":42,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":42,"ID":2,"data":{"Ret":0}}

3) Get the playback engine SDK information, including version number, docking, timeout configuration, etc.
Engine Even if this engine is not started for playback, the version of the specified engine can be obtained.
Request: {"req":"Player_GetSDKInfo","rid":43,"para":[{"ID":1,"Engine":2},{"ID":2}]}
Return respectively: {"ret":0,"rid":43,"ID":1,"data":{"Ret":0,"Ver":"V6.1.6.45","Build":"20210302","GenCfg":{"SplitFile":0,"ResumeUpgrade":0,"ResumeTimeout":0},"OverTimeCfg":{"PreviewTime":5000,"VodTime":5000,"AlarmTime":5000,"ElseTime":5000},"TalkCfg":{"TalkMode":0}}}

4) Get the current playback engine for the specified ID window: 0 Hikvision private protocol playback, 1 Hikvision MP4 local file playback, 2 open-source LibVLC playback, 3 FFPlayer engine playback, 4 Dahua SDK private protocol playback. Which engine is used is determined by the startup playback parameters.
Request: {"req":"Player_PlayEngine","rid":44,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":44,"ID":1,"data":{"Ret":0,"Engine":0}} and {"ret":0,"rid":44,"ID":2,"data":{"Ret":0,"Engine":1}}

5) Get the audio output type for the specified ID window. Valid for VLC playback.
Request: {"req":"Player_GetAudioOut","rid":45,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":45,"ID":1,"data":{"Ret":0,"AudioOut":"directsound"}} and {"ret":0,"rid":45,"ID":2,"data":{"Ret":0,"AudioOut":"any"}}

6) Set the audio output type for the specified ID window. Set before calling playback. Valid for VLC playback.
Request: {"req":"Player_PutAudioOut","rid":46,"para":[{"ID":1,"AudioOut":"directsound"},{"ID":2,"AudioOut":"any"}]}
Return respectively: {"ret":0,"rid":46,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":46,"ID":2,"data":{"Ret":0}}

7) Get the current playback network cache frames for the specified ID window. 1-50. 1 best real-time; 3 good real-time; 6 medium real-time, 15 medium fluency.
Request: {"req":"Player_GetCaching","rid":47,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":47,"ID":1,"data":{"Ret":0,"Caching":3}} and {"ret":0,"rid":47,"ID":2,"data":{"Ret":0,"Caching":1}}

8) Set the current playback network cache frames for the specified ID window. Valid before calling playback.
Request: {"req":"Player_PutCaching","rid":48,"para":[{"ID":1,"Caching":3},{"ID":2,"Caching":1}]}
Return respectively: {"ret":0,"rid":48,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":48,"ID":2,"data":{"Ret":0}}

9) Get the current connection type: 0: TCP mode, 1: UDP mode, 2: Multicast mode, 3 - RTP mode, 4-RTP/RTSP, 5-RSTP/HTTP
Request: {"req":"Player_GetLinkMode","rid":49,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":49,"ID":1,"data":{"Ret":0,"LinkMode":1}} and {"ret":0,"rid":49,"ID":2,"data":{"Ret":0,"LinkMode":0}}

10) Set the connection type. Valid before calling playback.
Request: {"req":"Player_PutLinkMode","rid":50,"para":[{"ID":1,"LinkMode":1},{"ID":2,"LinkMode":0}]}
Return respectively: {"ret":0,"rid":50,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":50,"ID":2,"data":{"Ret":0}}

11) Get the current stream type: Stream type, 0-main stream, 1-sub stream, 2-stream 3, 3-stream 4, 4-stream 5, 5-stream 6, 7-stream 7, 8-stream 8, 9-stream 9, 10-stream 10
Request: {"req":"Player_GetStreamType","rid":51,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":51,"ID":1,"data":{"Ret":0,"StreamType":1}} and {"ret":0,"rid":51,"ID":2,"data":{"Ret":0,"StreamType":0}}

12) Set the current stream type. Not valid for local files. Valid before calling playback.
Request: {"req":"Player_PutStreamType","rid":52,"para":[{"ID":1,"StreamType":1},{"ID":2,"StreamType":0}]}
Return respectively: {"ret":0,"rid":52,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":52,"ID":2,"data":{"Ret":0}}

13) Get the current protocol type: Application layer stream fetching protocol, 0-private protocol, 1-RTSP protocol, 2-SRTP stream encryption (corresponding to the dwLinkMode field in this structure, supporting the following methods: 1 means UDP transmission, signaling over TLS encryption, stream over SRTP encryption; 2 means multicast transmission, signaling over TLS encryption, stream over SRTP encryption)
Request: {"req":"Player_GetProtoType","rid":53,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":53,"ID":1,"data":{"Ret":0,"ProtoType":0}} and {"ret":0,"rid":53,"ID":2,"data":{"Ret":0,"ProtoType":1}}

14) Set the current protocol type. Not valid for local files. Valid before calling playback.
Request: {"req":"Player_PutProtoType","rid":54,"para":[{"ID":1,"ProtoType":1},{"ID":2,"ProtoType":0}]}
Return respectively: {"ret":0,"rid":54,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":54,"ID":2,"data":{"Ret":0}}

15) Get device information for the specified ID window. Only valid after successfully logging into Hikvision/Dahua hardware devices.
Request: {"req":"Player_GetDeviceInfo","rid":55,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":55,"ID":1,"aid":15,"data":{"Ret":0,"DeviceInfo":{"DevType":31,"IP":0,"DevChanNum":1,"IPChanNum":0,"AudioNum":1,"MainProto":2,"SubProto":2,"SN":"DS-2SC3Q140MY-TE20210819AACHG56068012"}}} and {"ret":0,"rid":55,"ID":2,"aid":13,"data":{"Ret":0,"DeviceInfo":{"DevType":20,"DiskNum":1,"DevChanNum":1,"SN":"9D0B7E0PHA14CA4"}}}

16) Login to the device. Only valid for connecting to Hikvision/Dahua hardware devices. Local MP4 file playback does not require login. Login result received via event.
Request: {"req":"Player_Login","rid":56,"para":[{"ID":1,"Server":"admin:test123456@192.168.1.9:8000"},{"ID":2,"Server":"admin:test123456@192.168.1.8:8000"}]}
Return respectively: {"ret":0,"rid":56,"ID":1,"data":{"Ret":0,"LoginID":1}} and {"ret":0,"rid":56,"ID":2,"data":{"Ret":0,"LoginID":2}}
LoginID is the login identifier, carried in the login result event.

17) Get the file duration for the specified ID playback window.
Request: {"req":"Player_GetFileTime","rid":57,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":57,"ID":1,"data":{"Ret":0,"FileTime":12}} and {"ret":0,"rid":57,"ID":2,"data":{"Ret":0,"FileTime":0}}

18) Get the played time of the file for the specified ID window.
Request: {"req":"Player_GetPlayedTime","rid":58,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":58,"ID":1,"data":{"Ret":0,"PlayedTime":12}} and {"ret":0,"rid":58,"ID":2,"data":{"Ret":0,"PlayedTime":0}}

19) Get the played frame count of the file for the specified ID window. Only valid for Hikvision/Dahua playbackback, FFPlayer, and local MP4 files opened for playback.
Request: {"req":"Player_GetPlayedFrames","rid":59,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":59,"ID":1,"data":{"Ret":0,"PlayedFrames":12}} and {"ret":0,"rid":59,"ID":2,"data":{"Ret":0,"PlayedFrames":0}}

20) Get the total playback frame count of the file for the specified ID window. Only valid for Hikvision/Dahua playbackback, FFPlayer, and local MP4 files opened for playback.
Request: {"req":"Player_GetTotalFrames","rid":60,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":60,"ID":1,"data":{"Ret":0,"TotalFrames":12}} and {"ret":0,"rid":60,"ID":2,"data":{"Ret":0,"TotalFrames":0}}

21) Get the file playback percentage for the specified ID window. Only valid after opening and playing VLC engine, FFPlayer, and local MP4 files.
Request: {"req":"Player_GetPlayPercent","rid":61,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":61,"ID":1,"data":{"Ret":0,"Percent":12}} and {"ret":0,"rid":61,"ID":2,"data":{"Ret":0,"Percent":0}}

22) Set the file playback percentage for the specified ID window. Only valid after opening and playing VLC engine, FFPlayer, and local MP4 files.
Request: {"req":"Player_PutPlayPercent","rid":62,"para":[{"ID":1,"Percent":12},{"ID":2,"Percent":0}]}
Return respectively: {"ret":0,"rid":62,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":62,"ID":2,"data":{"Ret":0}}

23) Playback control for the specified ID window. Valid after non-real-time stream open playback.
Type type: Default 1 speed up playback (can be called multiple times), 2 slow down playback (can be called multiple times), 3 reverse playback (only supported by Hikvision MP4 local file playback).
Request: {"req":"Player_FileControl","rid":63,"para":[{"ID":2,"Type":1}]}
Return: {"ret":0,"rid":63,"ID":1,"data":{"Ret":0}}

24) Get device type and serial number for the specified ID window. Invalid for local MP4 file playback.
Request: {"req":"Player_GetDeviceType","rid":64,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":64,"ID":1,"aid":15,"data":{"Ret":0,"Type":31,"SerialNumber":"DS-2SC3Q140MY-TE20210819AACHG56068012"}} and {"ret":0,"rid":64,"ID":2,"aid":14,"data":{"Ret":0,"Type":20,"SerialNumber":"9D0B7E0PHA14CA4"}}

25) Get or set the current playback channel for the specified ID window. Invalid for local MP4 file playback.
Get request: {"req":"Player_GetCurChannel","rid":65,"para":[{"ID":1},{"ID":2}]}
Set current playback channel request, only valid for DVRs: {"req":"Player_PutCurChannel","rid":65,"para":[{"ID":1,"Channel":33},{"ID":2,"Channel":34}]}
Return respectively: {"ret":0,"rid":65,"ID":1,"data":{"Ret":0,"CurChannel":2}} and {"ret":0,"rid":65,"ID":2,"data":{"Ret":0,"CurChannel":1}}

26) Get the status related to the specified ID window. Login status invalid for local MP4 files, FFPlayer, VLC engine playback. Only playback status is valid.
Request: {"req":"Player_GetStatus","rid":66,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":66,"ID":1,"data":{"Ret":0,"LoginStatus":2,"PlayStatus":1,"SupportTalk":1}} and {"ret":0,"rid":66,"ID":2,"data":{"Ret":0,"PlayStatus":1}}
Return LoginStatus is the Hikvision/Dahua private protocol login status.
Return PlayStatus is the current playback status. Playback status definition reference libvlc_state_t.
Return SupportTalk indicates whether intercom is supported. Valid for Hikvision/Dahua private protocol playback.

27) Play the specified channel, local file, or RTSP stream address in the specified ID window. Hikvision/Dahua private protocol playback requires login first.
When Channel is specified, it plays the specified channel. When Uri is specified, it can be a local path file or a server RTSP stream address (including playback address). If Uri contains special characters = & double quotes or Chinese, etc., it needs to be URL-encoded before passing. If Uri is not a full local path, the middleware program's Data subdirectory is used as the root directory by default.
Note: For example, if local MP4 file playback is already started, then when calling this interface for that window, it can only switch to local MP4 file playback.
Request: {"req":"Player_Play","rid":67,"para":[{"ID":1,"Channel":1},{"ID":2,"Uri":"d:/zorro/test.mp4"},{"ID":3,"Uri":"rtsp://192.168.1.8:554/h264/ch1/sub/av_stream","Option":"Stream=1"}]}
Return respectively: {"ret":0,"rid":67,"ID":1,"data":{"Ret":0,"PlayID":1}} {"ret":0,"rid":67,"ID":2,"data":{"Ret":0,"PlayID":2}} and {"ret":0,"rid":67,"ID":3,"data":{"Ret":0,"PlayID":3}}
PlayID is the current playback ID.

28) Playback control for the specified ID window. Playback must be called first.
Type is the control type: default 3 pause playback, 2 stop playback, 4 resume playback.
Request: {"req":"Player_Control","rid":68,"para":[{"ID":1,"Type":4},{"ID":2,"Type":2},{"ID":3,"Type":3}]}
Return respectively: {"ret":0,"rid":68,"ID":1,"data":{"Ret":0,"Status":3}} {"ret":0,"rid":68,"ID":2,"data":{"Ret":0,"Status":5}} and {"ret":0,"rid":68,"ID":3,"data":{"Ret":0,"Status":4}}
Status is the current playback status. Playback status definition reference libvlc_state_t.

29) Set sound sharing mode for the specified ID window. Playback must be called first.
AudioMode 1 is exclusive, single-channel audio mode; 2－share sound card, multi-channel audio mode.
Request: {"req":"Player_SetAudioMode","rid":69,"para":[{"ID":1,"AudioMode":2},{"ID":2,"AudioMode":2}]}
Return respectively: {"ret":0,"rid":69,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":69,"ID":2,"data":{"Ret":0}}

30) Turn on sound for the specified ID window. Local MP4 file playback needs sound turned on before playback. Non-local MP4 file playback requires playback to be called first.
Request: {"req":"Player_OpenSound","rid":70,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":70,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":70,"ID":2,"data":{"Ret":0}}

31) Turn off sound for the specified ID window. Requires sound to be turned on first.
Request: {"req":"Player_CloseSound","rid":71,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":71,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":71,"ID":2,"data":{"Ret":0}}

32) Get current audio volume 0-100, 0 represents mute, 100 maximum volume.
Request: {"req":"Player_GetAudioVolume","rid":72,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":72,"ID":1,"data":{"Ret":0,"AudioVolume":100}} and {"ret":0,"rid":72,"ID":2,"data":{"Ret":0,"AudioVolume":0}}

33) Set current audio volume 0-100, 0 represents mute, 100 maximum volume.
Request: {"req":"Player_PutAudioVolume","rid":73,"para":[{"ID":1,"AudioVolume":0},{"ID":2,"AudioVolume":100}]}
Return respectively: {"ret":0,"rid":73,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":73,"ID":2,"data":{"Ret":0}}

34) PTZ control for the specified ID window. Hikvision requires playback to be called first, Dahua only requires login. Valid for Hikvision/Dahua private protocols.
Stop whether to stop: 0－start, 1－stop.
Type is the PTZ control type.
Hikvision PTZ type definitions:
	PTZTYPE_LIGHT_PWRON		= 2,	/// Turn on light power
	PTZTYPE_WIPER_PWRON		= 3,	/// Turn on wiper switch
	PTZTYPE_FAN_PWRON		= 4,	/// Turn on fan switch
	PTZTYPE_HEATER_PWRON	= 5,	/// Turn on heater switch
	PTZTYPE_AUX_PWRON1		= 6,	/// Turn on auxiliary device 1 switch
	PTZTYPE_AUX_PWRON2		= 7,	/// Turn on auxiliary device 2 switch
	PTZTYPE_SET_PRESET		= 8,	/// Set preset point
	PTZTYPE_CLE_PRESET		= 9,	/// Clear preset point
	PTZTYPE_ZOOM_IN			= 11,	/// Zoom in (magnification increases) at speed SS
	PTZTYPE_ZOOM_OUT		= 12,	/// Zoom out (magnification decreases) at speed SS
	PTZTYPE_FOCUS_NEAR		= 13,	/// Focus forward at speed SS
	PTZTYPE_FOCUS_FAR		= 14,	/// Focus backward at speed SS
	PTZTYPE_IRIS_OPEN		= 15,	/// Iris open at speed SS
	PTZTYPE_IRIS_CLOSE		= 16,	/// Iris close at speed SS
	PTZTYPE_TILT_UP			= 21,	/// Tilt up at speed SS
	PTZTYPE_TILT_DOWN		= 22,	/// Tilt down at speed SS
	PTZTYPE_PAN_LEFT		= 23,	/// Pan left at speed SS
	PTZTYPE_PAN_RIGHT		= 24,	/// Pan right at speed SS
	PTZTYPE_UP_LEFT			= 25,	/// Tilt up and pan left at speed SS
	PTZTYPE_UP_RIGHT		= 26,	/// Tilt up and pan right at speed SS
	PTZTYPE_DOWN_LEFT		= 27,	/// Tilt down and pan left at speed SS
	PTZTYPE_DOWN_RIGHT		= 28,	/// Tilt down and pan right at speed SS
	PTZTYPE_PAN_AUTO		= 29,	/// Auto pan left/right scan at speed SS
	PTZTYPE_FILL_PRE_SEQ	= 30,	/// Add preset point to cruise sequence
	PTZTYPE_SET_SEQ_DWELL	= 31,	/// Set cruise point dwell time
	PTZTYPE_SET_SEQ_SPEED	= 32,	/// Set cruise speed
	PTZTYPE_CLE_PRE_SEQ		= 33,	/// Delete preset point from cruise sequence
	PTZTYPE_STA_MEM_CRUISE	= 34,	/// Start recording track
	PTZTYPE_STO_MEM_CRUISE	= 35,	/// Stop recording track
	PTZTYPE_RUN_CRUISE		= 36,	/// Start track
	PTZTYPE_RUN_SEQ			= 37,	/// Start cruise
	PTZTYPE_STOP_SEQ		= 38,	/// Stop cruise
	PTZTYPE_GOTO_PRESET		= 39,	/// Fast dome go to preset point
	PTZTYPE_DEL_SEQ			= 43,	/// Delete cruise path
	PTZTYPE_STOP_CRUISE		= 44,	/// Stop track
	PTZTYPE_DELETE_CRUISE	= 45,	/// Delete single track
	PTZTYPE_DELETE_ALL_CRUISE= 46,	/// Delete all tracks
	PTZTYPE_PAN_CIRCLE		= 50,	/// Auto circular scan at speed SS
	PTZTYPE_DRAG_PTZ		= 51,	/// Drag PTZ
	PTZTYPE_LINEAR_SCAN		= 52,	/// Area scan
	PTZTYPE_CLE_ALL_PRESET	= 53,	/// Clear all preset points
	PTZTYPE_CLE_ALL_SEQ		= 54,	/// Clear all cruises
	PTZTYPE_CLE_ALL_CRUISE	= 55,	/// Clear all tracks
	PTZTYPE_POPUP_MENU		= 56,	/// Show operation menu
	PTZTYPE_TILT_DOWN_ZOOM_IN	= 58,	/// Tilt down at speed SS && Zoom in at speed SS (magnification increases)
	PTZTYPE_TILT_DOWN_ZOOM_OUT	= 59,	/// Tilt down at speed SS && Zoom out at speed SS (magnification decreases)
	PTZTYPE_PAN_LEFT_ZOOM_IN	= 60,	/// Pan left at speed SS && Zoom in at speed SS (magnification increases)
	PTZTYPE_PAN_LEFT_ZOOM_OUT	= 61,	/// Pan left at speed SS && Zoom out at speed SS (magnification decreases)
	PTZTYPE_PAN_RIGHT_ZOOM_IN	= 62,	/// Pan right at speed SS && Zoom in at speed SS (magnification increases)
	PTZTYPE_PAN_RIGHT_ZOOM_OUT	= 63,	/// Pan right at speed SS && Zoom out at speed SS (magnification decreases)
	PTZTYPE_UP_LEFT_ZOOM_IN		= 64,	/// Tilt up and pan left at speed SS && Zoom in at speed SS (magnification increases)
	PTZTYPE_UP_LEFT_ZOOM_OUT	= 65,	/// Tilt up and pan left at speed SS && Zoom out at speed SS (magnification decreases)
	PTZTYPE_UP_RIGHT_ZOOM_IN	= 66,	/// Tilt up and pan right at speed SS && Zoom in at speed SS (magnification increases)
	PTZTYPE_UP_RIGHT_ZOOM_OUT	= 67,	/// Tilt up and pan right at speed SS && Zoom out at speed SS (magnification decreases)
	PTZTYPE_DOWN_LEFT_ZOOM_IN	= 68,	/// Tilt down and pan left at speed SS && Zoom in at speed SS (magnification increases)
	PTZTYPE_DOWN_LEFT_ZOOM_OUT	= 69,	/// Tilt down and pan left at speed SS && Zoom out at speed SS (magnification decreases)
	PTZTYPE_DOWN_RIGHT_ZOOM_IN	= 70,	/// Tilt down and pan right at speed SS && Zoom in at speed SS (magnification increases)
	PTZTYPE_DOWN_RIGHT_ZOOM_OUT	= 71,	/// Tilt down and pan right at speed SS && Zoom out at speed SS (magnification decreases)
	PTZTYPE_TILT_UP_ZOOM_IN		= 72,	/// Tilt up at speed SS && Zoom in at speed SS (magnification increases)
	PTZTYPE_TILT_UP_ZOOM_OUT	= 73,	/// Tilt up at speed SS && Zoom out at speed SS (magnification decreases)
For Hikvision PTZ control types involving speed, set this parameter: Speed specifies the speed control value set by the user according to different decoders. Range [1,7]. Do not set this value if speed control is not needed.

Dahua PTZ type definitions:
		DHPTZTYPE_UP_CONTROL = 0,                      // Up                   Speed corresponds to param2(1-8)
		DHPTZTYPE_DOWN_CONTROL,                        // Down                 Speed corresponds to param2(1-8)
		DHPTZTYPE_LEFT_CONTROL,                        // Left                 Speed corresponds to param2(1-8)
		DHPTZTYPE_RIGHT_CONTROL,                       // Right                Speed corresponds to param2(1-8)
		DHPTZTYPE_ZOOM_ADD_CONTROL,                    // Zoom+                Corresponds to param2
		DHPTZTYPE_ZOOM_DEC_CONTROL,                    // Zoom-                Corresponds to param2
		DHPTZTYPE_FOCUS_ADD_CONTROL,                   // Focus-               Corresponds to param2
		DHPTZTYPE_FOCUS_DEC_CONTROL,                   // Focus+               Corresponds to param2
		DHPTZTYPE_APERTURE_ADD_CONTROL,                // Iris+                Corresponds to param2
		DHPTZTYPE_APERTURE_DEC_CONTROL,                // Iris-                Corresponds to param2
		DHPTZTYPE_POINT_MOVE_CONTROL,                  // Go to preset point   param2 is preset point number
		DHPTZTYPE_POINT_SET_CONTROL,                   // Set                  param2 is preset point number, max number can be obtained from PTZ capability set. param4 can pass preset point name, max valid value 63 bytes.
		DHPTZTYPE_POINT_DEL_CONTROL,                   // Delete               param2 is preset point number
		DHPTZTYPE_POINT_LOOP_CONTROL,                  // Point-to-point cruise param1 is cruise line
		DHPTZTYPE_LAMP_CONTROL,                        // Light/Wiper          Corresponds to param1(1-On, 0-Off)
		/// The following are extended PTZ types
		DHEXTPTZTYPE_LEFTTOP = 0x20,                   // Up-Left
		DHEXTPTZTYPE_RIGHTTOP,                         // Up-Right
		DHEXTPTZTYPE_LEFTDOWN,                         // Down-Left
		DHEXTPTZTYPE_RIGHTDOWN,                        // Down-Right
		DHEXTPTZTYPE_ADDTOLOOP,                        // Add preset point to cruise Cruise line Preset point value
		DHEXTPTZTYPE_DELFROMLOOP,                      // Delete preset point from cruise Cruise line Preset point value
		DHEXTPTZTYPE_CLOSELOOP,                        // Clear cruise Cruise line
		DHEXTPTZTYPE_STARTPANCRUISE,                   // Start horizontal rotation
		DHEXTPTZTYPE_STOPPANCRUISE,                    // Stop horizontal rotation
		DHEXTPTZTYPE_SETLEFTBORDER,                    // Set left border
		DHEXTPTZTYPE_SETRIGHTBORDER,                   // Set right border
		DHEXTPTZTYPE_STARTLINESCAN,                    // Start line scan
		DHEXTPTZTYPE_CLOSELINESCAN,                    // Stop line scan
		DHEXTPTZTYPE_SETMODESTART,                     // Set mode start    Mode line
		DHEXTPTZTYPE_SETMODESTOP,                      // Set mode stop     Mode line
		DHEXTPTZTYPE_RUNMODE,                          // Run mode     Mode line
		DHEXTPTZTYPE_STOPMODE,                         // Stop mode     Mode line
		DHEXTPTZTYPE_DELETEMODE,                       // Clear mode     Mode line
		DHEXTPTZTYPE_REVERSECOMM,                      // Reverse command
		DHEXTPTZTYPE_FASTGOTO,                         // Fast positioning Horizontal coordinate(-8191~8191) Vertical coordinate(-8191~8191) Zoom(-16~16)
		DHEXTPTZTYPE_AUXIOPEN,                         // Auxiliary switch on Auxiliary point (param4 corresponds to PTZ_CONTROL_AUXILIARY, param1, param2, param3 invalid, dwStop set to FALSE)
		DHEXTPTZTYPE_AUXICLOSE,                        // Auxiliary switch off Auxiliary point (param4 corresponds to PTZ_CONTROL_AUXILIARY, param1, param2, param3 invalid, dwStop set to FALSE)
		DHEXTPTZTYPE_OPENMENU = 0x36,                  // Open dome menu
		DHEXTPTZTYPE_CLOSEMENU,                        // Close menu
		DHEXTPTZTYPE_MENUOK,                           // Menu OK
		DHEXTPTZTYPE_MENUCANCEL,                       // Menu Cancel
		DHEXTPTZTYPE_MENUUP,                           // Menu Up
		DHEXTPTZTYPE_MENUDOWN,                         // Menu Down
		DHEXTPTZTYPE_MENULEFT,                         // Menu Left
		DHEXTPTZTYPE_MENURIGHT,                        // Menu Right
		DHEXTPTZTYPE_ALARMHANDLE = 0x40,               // Alarm linkage PTZ parm1: alarm input channel; parm2: alarm linkage type 1-preset point 2-line scan 3-cruise; parm3: linkage value, e.g., preset number
		DHEXTPTZTYPE_MATRIXSWITCH = 0x41,              // Matrix switch parm1: previewer number (video output number); parm2: video input number; parm3: matrix number
		DHEXTPTZTYPE_LIGHTCONTROL,                     // Light controller
		DHEXTPTZTYPE_EXACTGOTO,                        // 3D precise positioning parm1: horizontal angle(0~3600); parm2: vertical coordinate(-1800-1800); parm3: zoom(1~128), zoom is level, not actual zoom multiple
		DHEXTPTZTYPE_RESETZERO,                        // 3D positioning reset zero position
		DHEXTPTZTYPE_MOVE_RELATIVELY = 0x84,			// PTZ relative positioning, param4 corresponds to structure NET_IN_MOVERELATIVELY_INFO
		DHEXTPTZTYPE_SET_DIRECTION = 0x85,				// Set PTZ direction, param4 corresponds to structure NET_IN_SET_DIRECTION_INFO
		DHEXTPTZTYPE_BASE_MOVE_ABSOLUTELY = 0x86,		// Precise absolute move control command, param4 corresponds to structure NET_IN_PTZBASE_MOVEABSOLUTELY_INFO (Obtain PTZ capability set (CFG_PTZ_PROTOCOL_CAPS_INFO) via CFG_CAP_CMD_PTZ command. If bSupportReal is TRUE, the device supports this operation)
		DHEXTPTZTYPE_BASE_MOVE_CONTINUOUSLY,			// PTZ continuous move control command, param4 corresponds to structure NET_IN_PTZBASE_MOVE_CONTINUOUSLY_INFO. Obtain PTZ capability set via CFG_CAP_CMD_PTZ.
														// If stuMoveContinuously.bSupportExtra in CFG_PTZ_PROTOCOL_CAPS_INFO is TRUE, the device supports this operation.
		DHEXTPTZTYPE_BASE_SET_FOCUS_MAP_VALUE,			// Set current position focus value, param4 corresponds to structure NET_IN_PTZBASE_SET_FOCUS_MAP_VALUE_INFO
		DHEXTPTZTYPE_BASE_MOVE_ABSOLUTELY_ONLYPT,		// Absolute positioning independently controls PT and can control speed in degrees/second, param4 corresponds to structure NET_IN_PTZBASE_MOVEABSOLUTELY_ONLYPT_INFO
		DHEXTPTZTYPE_BASE_MOVE_ABSOLUTELY_ONLYZOOM,		// Absolute positioning independently controls zoom, and can control zoom speed, param4 corresponds to structure NET_IN_PTZBASE_MOVEABSOLUTELY_ONLYZOOM_INFO
		DHEXTPTZTYPE_STOP_MOVE,							// Stop PTZ movement, also stop cruise mode, param4 corresponds to structure NET_IN_STOP_MOVE_INFO
		DHEXTPTZTYPE_TOTAL,                            // Maximum command value
Dahua PTZ control parameters param1 param2 param3 correspond to the parameters needed in the above types respectively.
Hikvision PTZ request example: {"req":"Player_PTZControl","rid":74,"para":[{"ID":1,"Type":25,"Speed":5,"Stop":0}]}
Dahua PTZ request example: {"req":"Player_PTZControl","rid":74,"para":[{"ID":1,"Type":0,"param2":5,"Stop":0}]}
Return: {"ret":0,"rid":74,"ID":1,"data":{"Ret":0}}

35) Get connection information for the specified ID window. Valid for Hikvision private protocol playback.
Type is the get type: 1 preview, 2 playbackback
3 intercom Returns empty for devices that do not support intercom.
Request: {"req":"Player_GetLinkAddr","rid":75,"para":[{"ID":1,"Type":1}]}
Return: {"ret":0,"rid":75,"ID":1,"data":{"Ret":0,"LinkInfo":{}}}

36) Get available video or intercom channels for the specified ID window. Valid for Hikvision/Dahua private protocol playback.
Type get type: 0 available video channels, 1 available intercom channels.
Request: {"req":"Player_GetChannelInfo","rid":76,"para":[{"ID":1,"Type":0},{"ID":2,"Type":1}]}
Return respectively: {"ret":0,"rid":76,"ID":1,"data":{"Ret":0,"ChannelInfo":""}} and {"ret":0,"rid":76,"ID":2,"data":{"Ret":0,"ChannelInfo":""}}

37) Refresh the intercom status of the specified ID window. Invalid for local MP4 file playback. Return value invalid for devices that do not support intercom. Valid for Hikvision private protocol playback.
Request: {"req":"Player_UpdateTalkStatus","rid":77,"para":[{"ID":1,"Channel":0}]}
Return: {"ret":0,"rid":77,"ID":1,"data":{"Ret":0,"TalkStatus":""}}

38) Start intercom for the specified ID window. Valid for Hikvision/Dahua private protocol playback.
Channel is the intercom channel. Only one intercom can be open at the same time.
TalkVolume is the intercom volume.
LocalFile and DeviceFile are the save file paths for local and device intercom content, respectively.
Request: {"req":"Player_StartTalk","rid":78,"para":[{"ID":1,"Channel":0,"TalkVolume":60,"LocalFile":"d:/Zorro/Local.mp4","DeviceFile":"d:/Zorro/Device.mp4"}]}
Return: {"ret":0,"rid":78,"ID":1,"data":{"Ret":0,"TID":1}}

39) Get the current intercom volume for the specified ID window. 0-100, 0 represents mute, 100 maximum volume. Valid for Hikvision/Dahua private protocol playback.
Request: {"req":"Player_GetTalkVolume","rid":79,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":79,"ID":1,"data":{"Ret":0,"TalkVolume":100}} and {"ret":0,"rid":79,"76":2,"data":{"Ret":0,"TalkVolume":0}} (Note: Typo in ID likely)

40) Set the current intercom volume for the specified ID window. 0-100, 0 represents mute, 100 maximum volume. Valid for Hikvision/Dahua private protocol playback.
Request: {"req":"Player_SetTalkVolume","rid":80,"para":[{"ID":1,"TalkVolume":50},{"ID":2,"TalkVolume":50}]}
Return respectively: {"ret":0,"rid":80,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":80,"ID":2,"data":{"Ret":0}}

41) Request to stop intercom for the specified ID window. Valid for Hikvision/Dahua private protocol playback.
Request: {"req":"Player_StopTalk","rid":81,"para":[{"ID":1}]}
Return: {"ret":0,"rid":81,"ID":1,"data":{"Ret":0}}

42) Screenshot for the specified ID window.
Type specifies the image type. Can specify 1 (BMP, does not support BASE64 encoded content), default 3 (JPG), 4 (PNG).
Base64 set to 1 means directly return BASE64 encoded image content.
AutoDel set to 1, Base64=1 takes effect, automatically delete the temporarily generated image file. Set 0 to not delete.
Count number of screenshots to capture, default capture one. Delay specifies the delay in milliseconds to start. Interval interval in milliseconds for multiple shots.
FileName specifies the screenshot file name. Chinese etc. need to be UrlEncode encoded first. Can be omitted to use default value.
CustomPath specifies the screenshot save path. Chinese etc. need to be UrlEncode encoded first. If not specified, determined by PathType.
PathType specifies the screenshot image save path type. 0 default temporary directory, 1 operating system desktop, 2 current logged-in user's My Pictures directory, 3 middleware data directory.
Quality capture quality. 0 represents original image. For VLC and Dahua, value 0-5. For Hikvision, value 0-2. Larger number, lower quality.
Request 1: {"req":"Player_SnapshotImg","rid":82,"para":[{"ID":1,"Type":3,"PathType":3,"Count":3,"Base64":1,"AutoDel":1,"Delay":1000,"Interval":200}]}
Request 2: {"req":"Player_SnapshotImg","rid":82,"para":[{"ID":1,"Type":3,"Count":3,"CustomPath":"D:/Zorro","FileName":"TestFileName"}]}
Return respectively: {"ret":0,"rid":82,"data":{"Ret":0,"Img":[{"Size":0,"Width":0,"Height":0,"File":""}]}} and {"ret":0,"rid":82,"ID":2,"data":{"Ret":0,,"Img":[{"Size":0,"Width":0,"Height":0,"File":""}]}} (Note: extra comma)

43) Record to file for the specified ID window. Does not support recording multiple simultaneously. Dahua SDK and Hikvision MP4 file playback not supported.
Type is the recording method (valid for VLC or FFPlayer playback): 0: VLC, 1: ffmpeg. When specifying 1, the ffmpeg program is stored in the playback mini-program subdirectory. Supports specifying the start time of the video for recording.
File is the recording target file. If not specified, generated automatically. If not a full local path, the middleware program's Data subdirectory is used as the root directory by default. Second is the recording time limit (seconds), 0 means stop is specified by the front-end.
Second is the recording time limit (seconds), 0 means stop is specified by the front-end.
Para is the recording parameter. Default for VLC is vcodec=h264. Default for ffmpeg is -vcodec libx264.
When Second is specified, it records for the specified number of seconds. If not specified, Player_StopRecord must be actively called to end recording.
{"req":"Player_RecordFile","rid":83,"para":[{"ID":1,"File":"D:/Zorro/Record.mp4","Second":30}]}
Return: {"ret":0,"rid":83,"ID":1,"data":{"Ret":0,"PID":1}}

44) Stop recording for the specified ID window. Dahua SDK and Hikvision MP4 file playback not supported.
{"req":"Player_StopRecord","rid":84,"para":[{"ID":1}]}
File is the recording file path, Size is the recording file size.
Return: {"ret":0,"rid":84,"ID":1,"data":{"Ret":0,"PID":1,"File":"D:/Zorro/Record.mp4","Size":321}}

45) Dynamically change the number of splits or playback content. Hikvision/Dahua private protocol playback requires specifying server information parameter Server.
ShowType specifies the number of splits. If unchanged, do not set.
ForceDestroy Default 1 for VLC4.0, default 0 otherwise. Specifying 0 does not destroy the original control when switching playback.
Play specifies playback content: If Uri contains special characters = & double quotes or Chinese, etc., it needs to be URL-encoded before passing. If Uri is not a full local path, the middleware program's Data subdirectory is used as the root directory by default.
Example request 1: {"req":"Player_ChangePlay","rid":85,"para":{"ShowType":2}}
Example request 2: {"req":"Player_ChangePlay","rid":85,"para":{"Play":[{"ID":1,"Server":"admin:test123456@192.168.1.9:8000","Option":"Stream=1 Link=0 caching=3"},{"ID":2,"Uri":"D:/Zorro/test.mp4"}]}}
Example request 3: {"req":"Player_ChangePlay","rid":85,"para":{"ShowType":3,"ForceDestroy":0,"Play":[{"ID":1,"Uri":"rtsp://wzh:test123456@192.168.1.8:554/h264/ch1/main/av_stream","Option":"caching=3"},{"ID":2,"Uri":"D:/Zorro/test.mp4","Option":""},{"ID":3,"Server":"admin:test123456@192.168.1.9:8000","Uri":"rtsp://wzh:test123456@192.168.1.8:554/h264/ch1/main/av_stream","Option":"Stream=1"}]}}
Return: {"ret":0,"rid":85,"data":{"Ret":0,"Play":[]}}

46) Set the current focus playback window.
ID is the current playback window sequence number. ID starts from 1. Ensure it does not go out of bounds.
{"req":"Player_SetSelect","rid":86,"para":{"ID":2}}
Return: {"ret":0,"rid":86,"ID":2,"data":{"Ret":1}}

47) Get the current focus playback window sequence number.
{"req":"Player_GetSelect","rid":87,"para":{}}
Return: {"ret":0,"rid":87,"ID":2,"data":{"Ret":1}}
ID is the current playback focus window.

48) Playback specified file by name for the specified ID window. Must login first. Valid for Hikvision/Dahua private protocol playback.
Uri is the file name on the server. For Hikvision, ch0001 represents the first channel, ch0002 the second channel, and so on.
Reverse 1 represents reverse playback. Default 0 plays along the timeline.
For Dahua playback, Player_SearchFile must be called first to find the recording file specified by Uri.
Hikvision example: {"req":"Player_PlayBackByName","rid":88,"para":[{"ID":1,"Reverse":0,"Uri":"ch0001_00000000129000000"},{"ID":2,"Reverse":1,"Uri":"ch0002_00000000138000000"}]}
Dahua example: {"req":"Player_PlayBackByName","rid":88,"para":[{"ID":1,"Reverse":0,"Uri":"/mnt/sd/2023-10-07/001/dav/06/06.37.14-06.37.34[M][0@0][0].dav"}]}
Return: {"ret":0,"rid":88,"ID":1,"data":{"Ret":0,"PlayID":1}} and {"ret":0,"rid":88,"ID":2,"data":{"Ret":0,"PlayID":2}}
PlayID is the current playback ID.

49) Playback by specified start and end time for the specified ID window. Must login first. Valid for Hikvision/Dahua private protocol playback.
Channel specifies the channel number. Begin and End specify the playback start and end time. Time is UNIX timestamp, starting from 00:00:00 on January 1, 1970.
Reverse 1 represents reverse playback.
{"req":"Player_PlayBackByTime","rid":89,"para":[{"ID":1,"Channel":33,"Begin":1696623200,"End":1696723200,"Reverse":0},{"ID":2,"Channel":34,"Begin":1696713200,"End":1696723200,"Reverse":1}]}
Return: {"ret":0,"rid":89,"ID":1,"data":{"Ret":0,"PlayID":1}} and {"ret":0,"rid":89,"ID":2,"data":{"Ret":0,"PlayID":2}}
PlayID is the current playback ID.

50) Playback control for the specified ID window. Valid for Hikvision/Dahua private protocol playback. Must have called playbackback Player_PlayBackByName or Player_PlayBackByTime first.
Type control type: 1 start playback, 2 stop playback, 3 pause playback, 4 resume playback (after pause, resumes playback at pre-pause speed), 5 fast playback, 6 slow playback, 7 normal speed playback,
8 single frame playback, 9 turn on sound, 10 turn off sound, 11 adjust volume, range [0,0xffff], 12 change playbackback progress,
13 get playbackback progress,
14 get current played time (valid for file playbackback only, Hikvision only),
15 get current played frame count (valid for file playbackback only, Hikvision only),
16 get total frame count of current playing file (valid for file playbackback only, Hikvision only),
17 get total time of current playing file (valid for file playbackback only, Hikvision only),
24 set stream speed (Hikvision minimum 256kbps, Dahua is frame count), 25 maintain heartbeat with device (Hikvision only), 26 locate by absolute time, 27 get total length of all files corresponding to the time period for time-based playbackback,
29 reverse playback to forward playback, 30 forward playback to reverse playback.
Example: Request pause or resume playback:
{"req":"Player_PlayBackControl","rid":90,"para":[{"ID":1,"Type":3},{"ID":2,"Type":4}]}
Example: 11 adjust volume, 12 change playbackback progress, etc., need setting. Val is the control value.
{"req":"Player_PlayBackControl","rid":90,"para":[{"ID":1,"Type":12,"Val":1},{"ID":2,"Type":12}]}
Return: {"ret":0,"rid":90,"ID":1,"data":{"Ret":0,"Val":1}} and {"ret":0,"rid":90,"ID":2,"data":{"Ret":0,"Val":2}}
Val is the obtained value, valid for Code 13,14,15,16,17, etc.

51) Full-screen for the specified ID split-screen window. One request can only specify one split-screen window to go full-screen.
Request: {"req":"Player_Fullscreen","rid":91,"para":[{"ID":1}]}
Return: {"ret":0,"rid":91,"ID":1,"data":{"Ret":0}}

52) Get the playback rate for the specified ID window. Valid for VLC playback engine.
Request: {"req":"Player_GetPlayRate","rid":92,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":92,"ID":1,"data":{"Ret":0,"Rate":1.0}} and {"ret":0,"rid":92,"ID":2,"data":{"Ret":0,"Rate":2.0}}

53) Set the playback rate for the specified ID window. Valid for FFPlayer and VLC playback engines.
Rate 1 is normal speed. FFPlayer engine: range 0.1-2. VLC engine: 0.5 half speed, 2.0 twice speed.
Request: {"req":"Player_PutPlayRate","rid":93,"para":[{"ID":1,"Rate":1},{"ID":2,"Rate":2}]}
Return respectively: {"ret":0,"rid":93,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":93,"ID":2,"data":{"Ret":0}}

54) Set subtitle information for the specified ID window. Valid for VLC playback engine and FFPlayer. Example:
Specify parameters, set only what is needed. Video must be playing to set.
Text text content
Opacity transparency 0-256. 0 fully transparent, 256 fully opaque.
Position (can be set in VLC playback) Display position: center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right. If not specified, determined by X and Y coordinates.
X and Y specify the starting coordinates of the text.
W and H specify the display width and height of the text respectively. FFPlayer needs setting.
Color color. Can use long integer (COLORREF), or color value like #000000.
Size font size.
Timeout timeout.
Request 1 (VLC): {"req":"Player_MarqueePut","rid":94,"para":[{"ID":1,"Text":"Hello1","Position":"TOP","Timeout":0,"Color":"16777215","Opacity":128,"Refresh":1,"Size":50,"X":50,"Y":50},{"ID":2,"Text":"Hello2","Position":"TOP","Timeout":0,"Color":"16777215","Opacity":255,"Refresh":1,"Size":50,"X":50,"Y":50}]}
Request 2 (FFPlayer): {"req":"Player_MarqueePut","rid":94,"para":[{"ID":1,"Text":"Hello","Color":"16777215","Opacity":128,"Size":50,"X":50,"Y":50,"W":200,"H":50}]}
Return respectively: {"ret":0,"rid":94,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":94,"ID":2,"data":{"Ret":0}}

55) Get subtitle information for the specified ID window. Valid for VLC playback engine. Example:
Text specified gets text information. Position specified gets position information.
Request: {"req":"Player_MarqueeGet","rid":95,"para":[{"ID":1,"Text":1,"Position":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":95,"ID":1,"data":{"Ret":0,"Color":0,"Opacity":0,"Refresh":0,"Size":0,"Timeout":0,"X":0,"Y":"","Text":"","Position":""}} and {"ret":0,"rid":95,"ID":2,"data":{"Ret":0,"Color":0,"Opacity":0,"Refresh":0,"Size":0,"Timeout":0,"X":0,"Y":""}}

56) Control subtitle for the specified ID window. Valid for VLC playback engine. Example:
Request: {"req":"Player_MarqueeControl","rid":96,"para":[{"ID":1,"Enable":1},{"ID":2,"Enable":0}]}
Return respectively: {"ret":0,"rid":96,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":96,"ID":2,"data":{"Ret":0}}

57) Set watermark display. Valid for VLC playback engine.
ID is the window sequence number.
File Watermark file path. If there are special symbols, please UrlEncode first. If empty, use Logo.png in the mini-program directory by default.
Code BASE64 encoding of the watermark image, can replace File.
Position Display position: center, left, right, top, bottom, top-left, top-right, bottom-left, bottom-right. Default undefined. Display position controlled by coordinates X and Y.
Delay Watermark interval image time in milliseconds 0 - 60000. Default 1000.
Repeat Loop count of watermark animation. -1 continue (default), 0 close.
Opacity Transparency (value between 0 (fully transparent) and 255 (fully opaque, default).
X Watermark X coordinate.
Y Watermark Y coordinate.
{"req":"Player_PutLogoShow","rid":97,"para":[{"ID":1,"File":"VLC.png" ,"Delay":20,"Repeat":-1,"Opacity":128,"X":100,"Y":100},{"ID":2,"Position":" center ","Delay":100,"Repeat":-1,"Opacity":256,"X":200,"Y":0}]}
Return respectively: {"ret":0,"rid":97,"ID":1,"data":{"Ret":0,"Enable":1}} and {"ret":0,"rid":97,"ID":2,"data":{"Ret":0,"Enable":0}} (Note: Opacity 256 should be 255 max)

58) Get watermark display information. Valid for VLC playback engine.
{"req":"Player_GetShowLogo","rid":98,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":98,"ID":1,"data":{"Ret":0,"File":"","Position":"","Delay":0,"Repeat":0,"Opacity":0,"X":0,"Y":0,"Enable":0}} and {"ret":0,"rid":98,"ID":2,"data":{"Ret":0}}

59) Watermark display control. Valid for VLC playback engine.
ID is the window sequence number. Flag 1 represents enable, 0 represents disable.
{"req":"Player_LogoControl","rid":99,"para":[{"ID":1,"Flag":1},{"ID":2,"Flag":0}]}
Return respectively: {"ret":0,"rid":99,"ID":1,"data":{"Ret":0,"Enable":1}} and {"ret":0,"rid":99,"ID":2,"data":{"Ret":0,"Enable":0}}

60) Get whether the toolbar is displayed for the specified ID window.
Request: {"req":"Player_GetToolbar","rid":100,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":100,"ID":1,"data":{"Ret":0,"Toolbar":1}} and {"ret":0,"rid":100,"ID":2,"data":{"Ret":0,"Toolbar":0}}

61) Set whether the toolbar is displayed for the specified ID window.
Request: {"req":"Player_PutToolbar","rid":101,"para":[{"ID":1,"Toolbar":1},{"ID":2,"Toolbar":0}]}
Return respectively: {"ret":0,"rid":101,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":101,"ID":2,"data":{"Ret":0}}

62) Get whether the specified ID window is muted.
Request: {"req":"Player_GetSoundStatus","rid":102,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":102,"ID":1,"data":{"Ret":0,"Mute":1}} and {"ret":0,"rid":102,"ID":2,"data":{"Ret":0,"Mute":0}}

63) Set whether the specified ID window is muted.
Request: {"req":"Player_PutSoundStatus","rid":103,"para":[{"ID":1,"Mute":1},{"ID":2,"Mute":0}]}
Return respectively: {"ret":0,"rid":103,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":103,"ID":2,"data":{"Ret":0}}

64) Get the sound channel for the specified ID window. Valid for VLC playback engine.
Request: {"req":"Player_GetAudioChannel","rid":104,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":104,"ID":1,"data":{"Ret":0,"Channel":1}} and {"ret":0,"rid":104,"ID":2,"data":{"Ret":0,"Channel":2}}

65) Set the sound channel for the specified ID window. Valid for VLC playback engine.
Channel definitions:
libvlc_AudioChannel_Error   = -1,
libvlc_AudioChannel_Stereo  =  1,
libvlc_AudioChannel_RStereo =  2,
libvlc_AudioChannel_Left    =  3,
libvlc_AudioChannel_Right   =  4,
libvlc_AudioChannel_Dolbys  =  5
Request: {"req":"Player_PutAudioChannel","rid":105,"para":[{"ID":1,"Channel":1},{"ID":2,"Channel":2}]}
Return respectively: {"ret":0,"rid":105,"ID":1,"data":{"Ret":0,"Volume":50}} and {"ret":0,"rid":105,"ID":2,"data":{"Ret":0,"Volume":100}}
Volume is the current volume.

66) Get the number of audio tracks for the specified ID window. Valid for VLC playback engine. Example:
Request: {"req":"Player_GetAudioTrackCount","rid":106,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":106,"ID":1,"data":{"Ret":0,"Count":0}} and {"ret":0,"rid":106,"ID":2,"data":{"Ret":0,"Count":0}}

67) Get the audio track for the specified ID window. Valid for VLC playback engine.
Request: {"req":"Player_GetAudioTrack","rid":107,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":107,"ID":1,"data":{"Ret":0,"Track":1}} and {"ret":0,"rid":107,"ID":2,"data":{"Ret":0,"Track":1}}

68) Set the audio track for the specified ID window. Valid for VLC playback engine.
Request: {"req":"Player_PutAudioTrack","rid":108,"para":[{"ID":1,"Track":1},{"ID":2,"Track":1}]}
Return respectively: {"ret":0,"rid":108,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":108,"ID":2,"data":{"Ret":0}}

69) Get the notification blocking mask for the specified ID window. Example:
Request: {"req":"Player_GetBlockFlag","rid":109,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":109,"ID":1,"data":{"Ret":0,"BlockFlag":0}} and {"ret":0,"rid":109,"ID":2,"data":{"Ret":0,"BlockFlag":0}}

70) Set the notification blocking mask for the specified ID window. Example:
Because several types of notifications are numerous, blocking notification settings are added. For example, to block mouse move and progress notifications, set 9.
1 block mouse move notification, 2 block time change notification, 4 block cache notification, 8 block progress percentage notification.
Request: {"req":"Player_PutBlockFlag","rid":110,"para":[{"ID":1,"BlockFlag":0},{"ID":2,"BlockFlag":0}]}
Return respectively: {"ret":0,"rid":110,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":110,"ID":2,"data":{"Ret":0}}

71) Move the specified ID window forward or backward by a number of frames. Positive number forward, negative number backward. Maximum backward determined by FrameCache count. Valid for VLC playback engine.
FrameCache parameter greater than 0 when playing represents starting frame-by-frame playback.
Request: {"req":"Player_MoveFrame","rid":111,"para":[{"ID":1,"FrameCount":-10},{"ID":2,"FrameCount":5}]}
Return respectively: {"ret":0,"rid":111,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":111,"ID":2,"data":{"Ret":0}}

72) Request to show the next frame (milliseconds). Playback pauses after execution. Effect similar to pressing shortcut key E in VLC desktop program. Valid for VLC and FFPlayer playback engines. Hikvision/Dahua private protocol playbackback streams supported.
In non-FFPlayer engines, FrameCount is the number of frames. Default 1 if not specified. Does not support backward operation. Only supports video files and playbackback streams.
In FFPlayer engine, FrameCount is the millisecond value. Negative value backward, positive value forward. Only supports video files and playbackback streams.
{"req":"Player_NextFrame","rid":112,"para":[{"ID":1,"FrameCount":10},{"ID":2,"FrameCount":10}]}
Return respectively: {"ret":0,"rid":112,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":112,"ID":2,"data":{"Ret":0}}

73) Get frames per second of the video. Example:
Request: {"req":"Player_GetFPS","rid":113,"para":[{"ID":1},{"ID":2}]}
Return respectively: {"ret":0,"rid":113,"ID":1,"data":{"Ret":0,"FPS":30}} and {"ret":0,"rid":113,"ID":2,"data":{"Ret":0,"FPS":30}}

74) HTTP synchronous method to upload video to server or download video to local. Upload is mainly used to upload screenshots and recordings to server for saving.
Type 1 synchronous upload, 0 download (supports asynchronous, set Asyn to 1).
Agent, Cookie, and Auth Cookie can pass the browser's Cookie or Auth authorization to verify upload permissions. Default empty. If not empty, UrlEncode first.
Local Local path of file to upload or save path for download file. If not specified, uses the currently open document by default. Needs UrlEncode encoding.
Url Address to upload to or download from. Needs UrlEncode encoding.
When Type is 1, you can add parameter Para, corresponding to the param parameters needed in the POST data packet. Default upload file name is upfile. Otherwise, set your own file parameter name via NodeName.
When Type is 0, you can add parameters MD5 and FileSize, hash value and size of the downloaded file, used to verify the integrity of the downloaded file. Can be default empty or 0.
{"req":"Player_NetFile","rid":101,"para":{"Type":1,"Agent":"","Cookie":"","Auth":"","Para":"","Local":"","Url":"http://zorrosoft.com/wp-admin/admin-ajax.php"}}
Return: {"ret":0,"rid":35,"data":{"Ret":"0","Info":{}}} Info is the information returned by the server after upload.

75) Search recording files for the specified ID split-screen window. Must login first. Valid for Hikvision/Dahua private protocol playback.
Channel specifies the channel number. Begin and End specify the playbackback start and end time. Time is UNIX timestamp, starting from 00:00:00 on January 1, 1970.
 StreamType stream type: 0-returns only one type of recording in the same time period, priority order: main stream, sub stream, third stream; 1-sub stream; 2-third stream; 3-main stream; 254-dual stream search (priority return main stream recording, if no main stream recording, return sub stream recording).
 FileType file type.
{"req":"Player_SearchFile","rid":115,"para":[{"ID":1,"Channel":33,"Begin":1665100800,"End":1665187200,"StreamType":0},{"ID":2,"Channel":34,"Begin":1665100800,"End":1665187200,"StreamType":1}]}
Return: {"ret":0,"rid":115,"ID":1,"data":{"Ret":0,"SID":1}} and {"ret":0,"rid":115,"ID":2,"data":{"Ret":0,"SID":2}}
SID is the current search sequence number. Final search results returned via event. The event packet contains the SID parameter.

76) Download recording file by name for the specified ID window. Must login first. Valid for Hikvision/Dahua private protocol playback.
Uri is the file name or download path on the server. For Hikvision, ch0001 represents the first channel, ch0002 the second channel, and so on.
For Dahua download, Player_SearchFile must be called first to find the recording file specified by Uri.
File is the recording target file. If not specified, generated automatically. If not a full local path, the middleware program's Data subdirectory is used as the root directory by default.
Hikvision specific: {"req":"Player_DownVideoByName","rid":116,"para":[{"ID":1,"Uri":"ch0001_00000000129000000","File":"D:/Zorro/ch0001_00000000129000000.mp4"},{"ID":2,"Uri":"ch0002_00000000138000000","File":"D:/Zorro/ch0002_00000000138000000.mp4"}]}
Dahua example: {"req":"Player_DownVideoByName","rid":116,"para":[{"ID":1,"Uri":"/mnt/sd/2023-10-07/001/dav/06/06.37.14-06.37.34[M][0@0][0].dav","File":"D:/Zorro/06.37.14_06.37.34.dav"}]}
Return: {"ret":0,"rid":116,"ID":1,"data":{"Ret":0,"DID":1}} and {"ret":0,"rid":116,"ID":2,"data":{"Ret":0,"DID":2}}
DID is the download sequence number, contained in the download progress notification.

77) Download recording file by time for the specified ID window. Must login first. Valid for Hikvision/Dahua private protocol playback.
Channel specifies the channel number.
SteamType specifies the download stream type. Hikvision default 0 main stream, 1 sub stream. Dahua default 0 all recordings, 1 external alarm recording, 2 motion detection alarm recording, 3 all alarm recordings.
Begin and End specify the playbackback start and end time. Time is UNIX timestamp, starting from 00:00:00 on January 1, 1970.
{"req":"Player_DownVideoByTime","rid":117,"para":[{"ID":1,"Channel":33,"Begin":1665102256,"End":1665104363,"File":"D:/Zorro/ch0001_00000000095000000.mp4"},{"ID":2,"Channel":1,"Begin":1665104363,"End":1665108028,"File":"D:/Zorro/test_1665108028.dav"}]}
Return: {"ret":0,"rid":117,"ID":1,"data":{"Ret":0,"DID":1}} and {"ret":0,"rid":117,"ID":2,"data":{"Ret":0,"DID":2}}
DID is the download sequence number, contained in the download progress notification.

78) Rotate the picture for the specified ID window. Valid for FFPlayer playback.
Angle specifies the clockwise rotation angle.
{"req":"Player_Rotation","rid":118,"para":[{"ID":1,"Angle":90},{"ID":2,"Angle":190}]}
Return: {"ret":0,"rid":118,"ID":1,"data":{"Ret":0,"Angle":30}} and {"ret":0,"rid":118,"ID":2,"data":{"Ret":0,"Angle":60}} (Note: Returned angle doesn't match request)

79) Local display for the specified ID window. Valid for FFPlayer playback.
X and Y specify the local display coordinates. W and H specify the local display width and height. Setting both height and width to 0 cancels local display.
{"req":"Player_LocalShow","rid":119,"para":[{"ID":1,"X":50,"Y":50,"W":200,"H":200},{"ID":2,"X":50,"Y":50,"W":300,"H":300}]}
Return: {"ret":0,"rid":119,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":119,"ID":2,"data":{"Ret":0}}

80) Overlay web rendering content in the specified ID window. Supported on Windows 7 and above OS for overlay, 8.0 and above systems support transparency. Microsoft Edge WebView2 Runtime needs to be installed locally.
Url is the transparent webpage address. If there are special symbols, please UrlEncode. Set to empty string to cancel overlay.
Alpha transparency (0-255) default 255 opaque. Windows 7 and below do not support transparency.
Rect node sets the overlay window position and size. If not set, represents the entire area. E represents margin default 1. X/Y/W/H represent the starting point and width/height of the overlay window displayed in the split-screen window. P is the display position type. If greater than 0, replaces X and Y. 1 top-left, 2 top-right, 3 bottom-left, 4 bottom-right.
ID set to 0 overlays the entire split-screen area, achieving personalized display for split-screen style.
{"req":"Player_FloatWebInfo","rid":120,"para":[{"ID":1,"Url":"https://output.jsbin.com/dopavun"},{"ID":2,"Alpha":70,"Url":"https://output.jsbin.com/dopavun"}]}
{"req":"Player_FloatWebInfo","rid":120,"para":[{"ID":1,"Url":"https://output.jsbin.com/dopavun","Rect":{"X":0,"Y":0,"P":0,"W":300,"H":300}}]}
Return: {"ret":0,"rid":120,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":120,"ID":2,"data":{"Ret":0}}

81) Inject script to run in the overlay webpage for the specified ID window.
Script is the script content. Please UrlEncode first. Set to empty string to cancel overlay.
Init initialize.
{"req":"Player_FloatWebInjectScript","rid":121,"para":[{"ID":1,"Init":0,"Script":"window.getComputedStyle(document.body).backgroundColor"},{"ID":2,"Init":0,"Url":"if%20(window.parent%20!%3D%3D%20window.top)%7B%0A%09delete%20window.open%3B%0A%7D"}]}
Return: {"ret":0,"rid":121,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":121,"ID":2,"data":{"Ret":0}}

82) Merge multiple similar video files. Merge results returned via event notification.
Type merge engine: 1: FFMpeg
Src Array of original video paths to merge. File names and paths need UrlEncode encoding first.
Out Merge generation target. If set, UrlEncode encoding needed first. If not set, automatically generates an mp4 video file name in the default path.
Example:
Request: {"req":"Player_MergeVideo","rid":122,"para":{"Type":1,"Src":["d:/Zorro/test5.mp4","d:/Zorro/test6.mp4"],"Out": "dest.mp4"}}
Return: {"ret":0,"rid":122,"data":{"Ret":0}}
Event notification merge result:
aid: corresponds to the rid of Player_MergeVideo request. Size: merged target video file size. PID: merge process. File: target video file finally formed by the merge.
{"event":"Player_MergeOK","aid":122,"PID":0,"data":{"Ret":0,"File":"dest.mp4","Size":0}}

83) Add carousel content for the specified split-screen. Generally used when large videos are sliced and played sequentially.
For example, if split-screen 1 is playing Url content (must be file or playbackback video), when playback ends, immediately switch to carousel content. No delay when switching.
If Uri contains special characters = & double quotes or Chinese, etc., it needs to be URL-encoded before passing. If Uri is not a full local path, the middleware program's Data subdirectory is used as the root directory by default.
Request: {"req":"Player_AddPreparePlay","rid":123,"para":[{"ID":1,"Uri":"d:/zorro/play.mp4","Name":"PreparePlay","Option":"Link=1 PlayEngine=3"}]}
Return: {"ret":0,"rid":123,"data":{"Ret":0}}

84) Set whether to disable double-click full-screen function for the specified split-screen window.
DisableDBFull set 1 to disable. Default not disabled.
{"req":"Player_PutDisableDBFull","rid":104,"para":[{"ID":1,"DisableDBFull":1},{"ID":2,"DisableDBFull":0}]} (Note: rid typo likely)
Return respectively: {"ret":0,"rid":124,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":124,"ID":2,"data":{"Ret":0}} (Corrected rid)

85) Get the playback log for the specified split-screen window. Supported by Hikvision/Dahua private protocol playback.
{"req":"Player_GetPlayLog","rid":105,"para":[{"ID":1},{"ID":2}]} (Note: rid typo likely)
Return respectively: {"ret":0,"rid":125,"ID":1,"data":[]} and {"ret":0,"rid":125,"ID":2,"data":[]} (Corrected rid)
data contains playback log records.

86) Set the specified area of the picture for the specified split-screen window to zoom in. Currently not supported by Dahua private protocol playback.
Left and Top are the top-left coordinates of the specified area in the playback window. Width and Height are the width and height of the specified area.
When Width and Height are set to 0, it cancels zoom display. Pressing Q or R can also exit zoom display, or right-clicking the mouse can also cancel.
{"req":"Player_PutCropWindow","rid":105,"para":[{"ID":1,"Left":50,"Top":50,"Width":300,"Height":300},{"ID":2,"Left":100,"Top":100,"Width":500,"Height":500}]} (Note: rid typo likely)
Return respectively: {"ret":0,"rid":126,"ID":1,"data":{"Ret":0}} and {"ret":0,"rid":126,"ID":2,"data":{"Ret":0}} (Corrected rid)

87) Request to pop up a message dialog box within the embedded window area.
Title is the popup title. If Chinese or special symbols, UrlEncode first.
Content is the popup content. If Chinese or special symbols, UrlEncode first.
Wait is how many seconds to wait before automatically disappearing. 0 means do not disappear automatically.
Type represents the popup type. 0 is MB_OK. See https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-messagebox uType definition.
{"req":"Player_MsgBox","rid":52,"para":{"Title":"Alert","Content":"This is a test message","Wait":5,"Type":0}}
Return: {"ret":0,"rid":52,"data":{"Ret":"0"}} (Note: Ret as string)

5. Notifications received by the RTSP Web Multi-Engine Player:
These notifications must be received by establishing a WebSocket connection to the port listened by this mini-program.

A. Mini-program:
1) Selected Selected split-screen window sequence number notification.
ID is the split-screen sequence number. aid is the playback instance ID. Same below.
{"event":"Player_Selected","ID":1,"rid":1,"data":{}}

2) FullScreen Split-screen window full-screen toggle notification.
{"event":"Player_FullScreen","ID":1,"rid":1,"data":{}}

3) Recording end notification (issued for time-limited recording).
ID is the window sequence number. PID is the recording ID. Size recording file size. File recording actual full path.
{"event":"Player_StopRecord","ID":1,"rid":1,"data":{"Ret":0,"PID":1,"File":"D:/Zorro/test.mp4","Size":321}}

4) Login status notification. Invalid for playing MP4 local files.
{"event":"Player_LoginStatus","ID":1,"rid":1,"data":{"LID":1,"Status":0,"Desc":"Login failed"}}

5) Hikvision/Dahua interface exception notification.
Type 0x8001 voice intercom exception, 0x8003 network preview exception, 0x8005 preview reconnection, 0x8010 playbackback exception, 0x8015 preview reconnection success.
{"event":"Player_Exception","ID":1,"rid":1,"data":{"Type":0x8001}}

6) Hikvision/Dahua SDK error notification.
{"event":"Player_SDKErr","ID":1,"rid":1,"data":{}}

7) Playback event notification.
Type event type. Val event-related value.
Type contains the following meanings:
5(libvlc_MediaStateChanged)				Video status change: 1 opening, 2 buffering data, 3 playing, 4 playback paused, 5 playback stopped, 6 played to end, 7 playback error.
258(libvlc_MediaPlayerOpening)			Opening playback content...
259(libvlc_MediaPlayerBuffering)		Buffering data... Val contains the length of buffered data.
260(libvlc_MediaPlayerPlaying)			Playing.
261(libvlc_MediaPlayerPaused)			Playback paused.
262(libvlc_MediaPlayerStopped)			Playback stopped.
263(libvlc_MediaPlayerForward)			Fast forward playback.
264(libvlc_MediaPlayerBackward)			Fast backward playback.
265(libvlc_MediaPlayerEndReached)		Played to end.
266(libvlc_MediaPlayerEncounteredError) Playback encountered error.
267(libvlc_MediaPlayerTimeChanged)  	Playback time changed. Val corresponds to the latest time.
268(libvlc_MediaPlayerPositionChanged) 	Playback position changed. Val corresponds to the latest position. Multiply by 100 for percentage.
273(libvlc_MediaPlayerLengthChanged) 	Playback length changed. Val corresponds to the latest length.
283(libvlc_MediaPlayerAudioVolume)  	Playback volume notification. Val corresponds to the latest volume.
{"event":"Player_VlcEvent","ID":1,"rid":1,"data":{"Type":1,"Val":0}}

8) Mute notification. Mute 1 is muted, 0 not muted. Volume 0-100.
{"event":"Player_SoundStatus","ID":1,"rid":1,"data":{"Mute":1,"Volume":80}}

9) Frame playback notification. CacheCount current cached frame count. CurDraw current drawing frame sequence number in cache.
{"event":"Player_FramePlaying","ID":1,"rid":1,"data":{"CacheCount":30,"CurDraw":0}}

10) Audio information notification. Format format. Rate sample rate. Channel number of channels.
{"event":"Player_AudioInfo","ID":1,"rid":1,"data":{"Format":"S16N","Rate":8000,"Channel":2}}

11) Sound column notification. Left left channel volume. Right right channel volume.
{"event":"Player_AudioWave","ID":1,"rid":1,"data":{"Left":30,"Right":20}}

12) Search result notification for recordings on DVR for Hikvision/Dahua private protocol.
{"event":"Player_SearchResult","ID":1,"rid":1,"data":{"SID":1,"Info":[{"Name":"ch0001_00000000094000100","Size":1053565500,"FType":0,"SType":0,"Locked":0,"STime":1665100588,"ETime":1665102259},{"Name":"ch0001_00000000095000000","Size":1065176994,"FType":0,"SType":0,"Locked":0,"STime":1665102256,"ETime":1665104363},{"Name":"ch0001_00000000097000000","Size":1065309215,"FType":0,"SType":0,"Locked":0,"STime":1665104363,"ETime":1665108028}]}}
FType file type. SType stream type. Locked whether locked.
STime stream start time. ETime stream end time.

13) Download progress notification for recordings on DVR for Hikvision/Dahua private protocol.
{"event":"Player_DownPos","ID":1,"rid":2,"data":{"DID":1,"Pos":100}}
Pos 100 when download ends.

14) Overlay webpage navigation result notification.
{"event":"Player_WebNavResult","ID":1,"rid":1,"aid":1,"data":{"Result":""}]}} (Note: Extra bracket)
Result UrlEncode encoded request result.

15) Overlay webpage injected script result notification.
{"event":"Player_WebScriptResult","ID":1,"rid":1,"aid":1,"data":{"Result":""}]}} (Note: Extra bracket)
Result UrlEncode encoded request result.

16) Playback error log notification.
{"event":"Player_PlayLog","ID":1,"rid":1,"aid":1,"data":{"Level":1,"Line":18,"Module":"","Desc":""}]}} (Note: Extra bracket)
Level log level: 1 error log, 2 warning log, 4 notification log.
Module module name.
Line code line number.
Desc log description.

17) Video resolution notification for VLC engine, Hikvision MP4, etc. playback.
{"event":"Player_VideoSize","ID":1,"rid":2,"data":{"Width":1024,"Height":768}}

18) Selected local zoom notification for VLC engine, FFPlayer, etc. playback.
{"event":"Player_ZoomOut","ID":1,"rid":2,"data":{"X":50,"Y":50,"Width":1024,"Height":768}}
data parameters are the selected X, Y coordinates and the selected area width and height.

19) Local zoom end notification for VLC engine, FFPlayer, etc. playback.
{"event":"Player_ZoomEnd","ID":1,"rid":2,"data":{}}

B. Supported event notifications:
1) Whether the mini-program responded to the hotkey full-screen.
{"event":"Player_FullScreen","rid":1,"data":{"FullScreen":0}} FullScreen is the current full-screen flag.

2) Wrl_AppletExit Mini-program exit notification.
{"event":"Wrl_AppletExit","data":{"ID":1}} ID mini-program instance ID.

6. Other
Ensure the JSON data packet of request parameters is UTF-8 without BOM encoding.
For more interface request descriptions, refer to the document TestWrl.txt in the installation directory, "ApeMaster Developer Manual.pdf" and "ApeMaster Middleware Security Solution.pdf" in the SDK package.